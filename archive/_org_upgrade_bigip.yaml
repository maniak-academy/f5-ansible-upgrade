---
- name: Upgrade Standby Only BIG-IP Software
  hosts: lb
  connection: local
  gather_facts: False

  vars:
    install_no_reboot: true #Set to false if you do not want automatically upgrade
    
    provider:
      password: "{{ bigip_password }}"
      server: "{{ ansible_host }}"
      user: "{{ bigip_username }}"
      validate_certs: False
  
  vars_prompt:
    - name: version
      prompt: "Version and build from ISO"
      private: no

  tasks:    
    
    - name: Task 1 - Get failover State
      bigip_command:
        commands:
          - show sys failover
        provider: "{{ provider }}" 
      register: failover_state
      args:
        warn: false

    - block:
      - name: Task 2 - Verify running configuration of the BIG-IP
        bigip_command:
          commands:
            - load sys config verify
          provider: "{{ provider }}" 
        args:
          warn: false

      - name: Task 3 - Wait for configuration to finish loading
        wait_for:
          timeout: 45
        delegate_to: localhost

      - name: Task 4 - Get current time on BIG-IP
        command: date "+%H%M%S-%m%d%y"
        register: date

      - name: Task 5 - Download a new UCS
        bigip_ucs_fetch:
          src: "{{ inventory_hostname + '-' + date.stdout +  '-backup.ucs' }}"
          dest: "{{ 'files/' + inventory_hostname + '-' + date.stdout +  '-backup.ucs' }}"
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Task 6 - Upload image to the BIG-IP
        bigip_software_image:
         image: "{{ 'files/BIGIP-' + version  + '.iso' }}"
         provider: "{{ provider }}"
        delegate_to: localhost

      - name: Task 7 - Install BIG-IP software
        bigip_software_install:
          image: "{{ 'BIGIP-' + version  + '.iso' }}"
          state: installed
          volume: "HD1.2"
          provider: "{{ provider }}"
        delegate_to: localhost
        async: 45
        poll: 0

      - name: Task 8 - Verify the system was installed
        bigip_device_info:
          gather_subset: 
            - software-volumes
          provider: "{{ provider }}"
        register: bigip_software_install
        tags:
          - verify

      - name: Displays the device info
        debug:
          var: bigip_software_install.software_volumes
        tags:
          - verify

      - name: Task 9 - Copy the config from HD1.1 to HD1.2 cpcfg --source=HD1.1 --reboot HD1.2    
        raw: curl -u "{{bigip_username}}":"{{bigip_password}}" -k https://"{{ansible_host}}":443/mgmt/tm/util/bash  -H "Content-type:application/json" -d "{\"command\":\"run\",\"utilCmdArgs\":\"-c 'cpcfg --source=HD1.1 --reboot HD1.2'\"}"
        ignore_errors: True
        register: cpcfg
        when: not install_no_reboot

      when: failover_state.stdout is search("standby")